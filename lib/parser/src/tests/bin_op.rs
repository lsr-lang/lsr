use crate::tests::utils::parse;
use expect_test::expect;

#[test]
fn bin_op() {
    expect![[r#"
            Num(
                "1",
            )
        "#]]
    .assert_debug_eq(&parse("(1)"));

    expect![[r#"
            BinOp(
                (
                    Num(
                        "1",
                    ),
                    Addition(
                        "+",
                    ),
                    Num(
                        "2",
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 + 2"));

    expect![[r#"
            BinOp(
                (
                    Num(
                        "1",
                    ),
                    Multiplication(
                        "*",
                    ),
                    Num(
                        "2",
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 * 2"));

    expect![[r#"
            BinOp(
                (
                    Num(
                        "1",
                    ),
                    Addition(
                        "+",
                    ),
                    BinOp(
                        (
                            Num(
                                "2",
                            ),
                            Multiplication(
                                "*",
                            ),
                            Num(
                                "2",
                            ),
                        ),
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 + 2 * 2"));

    expect![[r#"
            BinOp(
                (
                    BinOp(
                        (
                            Num(
                                "1",
                            ),
                            Multiplication(
                                "*",
                            ),
                            Num(
                                "2",
                            ),
                        ),
                    ),
                    Addition(
                        "+",
                    ),
                    Num(
                        "2",
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 * 2 + 2"));

    expect![[r#"
            BinOp(
                (
                    Num(
                        "1",
                    ),
                    Multiplication(
                        "*",
                    ),
                    BinOp(
                        (
                            Num(
                                "2",
                            ),
                            Addition(
                                "+",
                            ),
                            Num(
                                "2",
                            ),
                        ),
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 * (2 + 2)"));

    expect![[r#"
            BinOp(
                (
                    Num(
                        "1",
                    ),
                    Division(
                        "/",
                    ),
                    BinOp(
                        (
                            Num(
                                "4",
                            ),
                            Subtraction(
                                "-",
                            ),
                            BinOp(
                                (
                                    Num(
                                        "3",
                                    ),
                                    Multiplication(
                                        "*",
                                    ),
                                    Num(
                                        "6",
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 / (4 - 3 * 6)"));

    expect![[r#"
            BinOp(
                (
                    Num(
                        "1",
                    ),
                    Multiplication(
                        "*",
                    ),
                    BinOp(
                        (
                            Num(
                                "2",
                            ),
                            Power(
                                "^",
                            ),
                            Num(
                                "3",
                            ),
                        ),
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 * 2 ^ 3"));

    expect![[r#"
            BinOp(
                (
                    Num(
                        "1",
                    ),
                    Custom(
                        "+----+",
                    ),
                    Num(
                        "2",
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("1 +----+ 2"));

    expect![[r#"
            BinOp(
                (
                    BinOp(
                        (
                            Num(
                                "3",
                            ),
                            Equal(
                                "=",
                            ),
                            BinOp(
                                (
                                    Num(
                                        "4",
                                    ),
                                    Power(
                                        "^",
                                    ),
                                    Num(
                                        "5",
                                    ),
                                ),
                            ),
                        ),
                    ),
                    Custom(
                        "|>",
                    ),
                    BinOp(
                        (
                            Float(
                                "12f",
                            ),
                            Subtraction(
                                "-",
                            ),
                            BinOp(
                                (
                                    Num(
                                        "3",
                                    ),
                                    Division(
                                        "/",
                                    ),
                                    Num(
                                        "6",
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            )
        "#]]
    .assert_debug_eq(&parse("3 = 4 ^ 5 |> 12f - 3 / 6"));
}
